import java.util.Scanner;

public class Solution {
    //3282
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int testNum = sc.nextInt();

        for (int test = 1; test <= testNum; test++) {
            int n = sc.nextInt();
            int k = sc.nextInt();

            //각 물건 부피, 가치 저장할 공간 인덱스 0 사용 x
            int[][] object = new int[n + 1][2];
            //동적 계획법을 위한 배열 선언
            int[][] dp = new int[n + 1][k + 1];

            //물건의 부피와 가치 저장
            for (int i = 1; i <= n; i++) {
                object[i][0] = sc.nextInt(); // 물건의 부피
                object[i][1] = sc.nextInt(); // 물건의 가치
            }

            // 아무것도 넣지 않은 경우, 첫 행을 0으로 초기화
            for (int i = 0; i <= k; i++) {
                dp[0][i] = 0;
            }

            // 첫 번째 물건부터 물건 하나씩 넣어봄
            for (int i = 1; i <= n; i++) {
                // 가방 무게에 따라서 해봄
                for (int j = 0; j <= k; j++) {
                    // 가방에 넣을 수 없는 경우
                    if (object[i][0] > j)
                        //이전 단계가 최대 가치
                        dp[i][j] = dp[i - 1][j];
                    else // 넣을 수 있는 경우
                    // 이전 단계의 최대 가치와 현재 물건을 넣었을때 가치를 비교하여 큰 값을 선택
                        dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - object[i][0]] + object[i][1]);
                }
            }

            System.out.println("#" + test + " " + dp[n][k]);
        }

        sc.close();
    }
}
